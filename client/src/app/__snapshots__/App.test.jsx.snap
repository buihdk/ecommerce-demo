// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App renders without crashing 1`] = `
<App>
  <BrowserRouter>
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "createHref": [Function],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <WithStyles(ForwardRef(Container))
        fixed={true}
      >
        <ForwardRef(Container)
          classes={
            Object {
              "fixed": "MuiContainer-fixed",
              "maxWidthLg": "MuiContainer-maxWidthLg",
              "maxWidthMd": "MuiContainer-maxWidthMd",
              "maxWidthSm": "MuiContainer-maxWidthSm",
              "maxWidthXl": "MuiContainer-maxWidthXl",
              "maxWidthXs": "MuiContainer-maxWidthXs",
              "root": "MuiContainer-root",
            }
          }
          fixed={true}
        >
          <div
            className="MuiContainer-root MuiContainer-fixed MuiContainer-maxWidthLg"
          >
            <Routes>
              <ErrorBoundary
                fallback={
                  <UNDEFINED
                    msg="App has crashed. Check console for more info."
                  />
                }
              >
                <Suspense
                  fallback={<ForwardRef(WithStyles) />}
                >
                  <Switch>
                    <Route
                      component={[Function]}
                      computedMatch={
                        Object {
                          "isExact": true,
                          "params": Object {},
                          "path": "/",
                          "url": "/",
                        }
                      }
                      exact={true}
                      location={
                        Object {
                          "hash": "",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        }
                      }
                      path="/"
                    >
                      <component
                        history={
                          Object {
                            "action": "POP",
                            "block": [Function],
                            "createHref": [Function],
                            "go": [Function],
                            "goBack": [Function],
                            "goForward": [Function],
                            "length": 1,
                            "listen": [Function],
                            "location": Object {
                              "hash": "",
                              "pathname": "/",
                              "search": "",
                              "state": undefined,
                            },
                            "push": [Function],
                            "replace": [Function],
                          }
                        }
                        location={
                          Object {
                            "hash": "",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          }
                        }
                        match={
                          Object {
                            "isExact": true,
                            "params": Object {},
                            "path": "/",
                            "url": "/",
                          }
                        }
                      />
                    </Route>
                  </Switch>
                  <WithStyles(ForwardRef(CircularProgress))>
                    <ForwardRef(CircularProgress)
                      classes={
                        Object {
                          "circle": "MuiCircularProgress-circle",
                          "circleDisableShrink": "MuiCircularProgress-circleDisableShrink",
                          "circleIndeterminate": "MuiCircularProgress-circleIndeterminate",
                          "circleStatic": "MuiCircularProgress-circleStatic",
                          "colorPrimary": "MuiCircularProgress-colorPrimary",
                          "colorSecondary": "MuiCircularProgress-colorSecondary",
                          "indeterminate": "MuiCircularProgress-indeterminate",
                          "root": "MuiCircularProgress-root",
                          "static": "MuiCircularProgress-static",
                          "svg": "MuiCircularProgress-svg",
                        }
                      }
                    >
                      <div
                        className="MuiCircularProgress-root MuiCircularProgress-colorPrimary MuiCircularProgress-indeterminate"
                        role="progressbar"
                        style={
                          Object {
                            "height": 40,
                            "width": 40,
                          }
                        }
                      >
                        <svg
                          className="MuiCircularProgress-svg"
                          viewBox="22 22 44 44"
                        >
                          <circle
                            className="MuiCircularProgress-circle MuiCircularProgress-circleIndeterminate"
                            cx={44}
                            cy={44}
                            fill="none"
                            r={20.2}
                            strokeWidth={3.6}
                            style={Object {}}
                          />
                        </svg>
                      </div>
                    </ForwardRef(CircularProgress)>
                  </WithStyles(ForwardRef(CircularProgress))>
                </Suspense>
              </ErrorBoundary>
            </Routes>
          </div>
        </ForwardRef(Container)>
      </WithStyles(ForwardRef(Container))>
    </Router>
  </BrowserRouter>
</App>
`;
